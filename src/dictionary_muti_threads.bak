use std::collections::HashMap;
use std::sync::{Arc, Mutex};
use std::{fs, thread};

pub struct Dictionary {
    pub st_characters: (HashMap<String, String>, usize),
    pub st_phrases: (HashMap<String, String>, usize),
    pub ts_characters: (HashMap<String, String>, usize),
    pub ts_phrases: (HashMap<String, String>, usize),
    pub tw_phrases: (HashMap<String, String>, usize),
    pub tw_phrases_rev: (HashMap<String, String>, usize),
    pub tw_variants: (HashMap<String, String>, usize),
    pub tw_variants_rev: (HashMap<String, String>, usize),
    pub tw_variants_rev_phrases: (HashMap<String, String>, usize),
    pub hk_variants: (HashMap<String, String>, usize),
    pub hk_variants_rev: (HashMap<String, String>, usize),
    pub hk_variants_rev_phrases: (HashMap<String, String>, usize),
    pub jps_characters: (HashMap<String, String>, usize),
    pub jps_phrases: (HashMap<String, String>, usize),
    pub jp_variants: (HashMap<String, String>, usize),
    pub jp_variants_rev: (HashMap<String, String>, usize),
}

impl Dictionary {
    pub fn new() -> Self {
        let dict_files = vec![
            ("dicts/STCharacters.txt", "st_characters"),
            ("dicts/STPhrases.txt", "st_phrases"),
            ("dicts/TSCharacters.txt", "ts_characters"),
            ("dicts/TSPhrases.txt", "ts_phrases"),
            ("dicts/TWPhrases.txt", "tw_phrases"),
            ("dicts/TWPhrasesRev.txt", "tw_phrases_rev"),
            ("dicts/TWVariants.txt", "tw_variants"),
            ("dicts/TWVariantsRev.txt", "tw_variants_rev"),
            ("dicts/TWVariantsRevPhrases.txt", "tw_variants_rev_phrases"),
            ("dicts/HKVariants.txt", "hk_variants"),
            ("dicts/HKVariantsRev.txt", "hk_variants_rev"),
            ("dicts/HKVariantsRevPhrases.txt", "hk_variants_rev_phrases"),
            ("dicts/JPShinjitaiCharacters.txt", "jps_characters"),
            ("dicts/JPShinjitaiPhrases.txt", "jps_phrases"),
            ("dicts/JPVariants.txt", "jp_variants"),
            ("dicts/JPVariantsRev.txt", "jp_variants_rev"),
        ];

        let shared_data: Arc<Mutex<HashMap<&str, (HashMap<String, String>, usize)>>> =
            Arc::new(Mutex::new(HashMap::new()));

        let mut threads = Vec::new();

        for (file_path, field_name) in dict_files {
            let shared_data_clone = Arc::clone(&shared_data);
            let thread = thread::spawn(move || {
                let dictionary_content = fs::read_to_string(file_path).unwrap();
                let (dictionary, max_length) = Dictionary::load_dictionary(&dictionary_content);
                let mut shared_data = shared_data_clone.lock().unwrap();
                shared_data.insert(field_name, (dictionary, max_length));
            });
            threads.push(thread);
        }

        for thread in threads {
            thread.join().unwrap();
        }

        let shared_data = shared_data.lock().unwrap();

        Dictionary {
            st_characters: shared_data["st_characters"].clone(),
            st_phrases: shared_data["st_phrases"].clone(),
            ts_characters: shared_data["ts_characters"].clone(),
            ts_phrases: shared_data["ts_phrases"].clone(),
            tw_phrases: shared_data["tw_phrases"].clone(),
            tw_phrases_rev: shared_data["tw_phrases_rev"].clone(),
            tw_variants: shared_data["tw_variants"].clone(),
            tw_variants_rev: shared_data["tw_variants_rev"].clone(),
            tw_variants_rev_phrases: shared_data["tw_variants_rev_phrases"].clone(),
            hk_variants: shared_data["hk_variants"].clone(),
            hk_variants_rev: shared_data["hk_variants_rev"].clone(),
            hk_variants_rev_phrases: shared_data["hk_variants_rev_phrases"].clone(),
            jps_characters: shared_data["jps_characters"].clone(),
            jps_phrases: shared_data["jps_phrases"].clone(),
            jp_variants: shared_data["jp_variants"].clone(),
            jp_variants_rev: shared_data["jp_variants_rev"].clone(),
        }
    }

    fn load_dictionary(dictionary_content: &str) -> (HashMap<String, String>, usize) {
        let mut dictionary = HashMap::new();
        let mut max_length = 0;

        for line in dictionary_content.lines() {
            let parts: Vec<&str> = line.split_whitespace().collect();
            if parts.len() >= 2 {
                let phrase = parts[0].to_string();
                let translation = parts[1].to_string();
                let char_count = phrase.chars().count();
                if char_count > max_length {
                    max_length = char_count;
                }
                dictionary.insert(phrase, translation);
            }
        }

        (dictionary, max_length)
    }

}
