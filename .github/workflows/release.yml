name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: opencc-fmmseg-${{ github.ref_name }}-linux
            bin_ext: ''
            dll_name: libopencc_fmmseg_capi.so
          - os: macos-latest
            artifact_name: opencc-fmmseg-${{ github.ref_name }}-macos
            bin_ext: ''
            dll_name: libopencc_fmmseg_capi.dylib
          - os: windows-latest
            artifact_name: opencc-fmmseg-${{ github.ref_name }}-windows
            bin_ext: '.exe'
            dll_name: opencc_fmmseg_capi.dll

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build Project
        run: cargo build --release --workspace

      - name: Prepare Structured Release Folder
        run: |
          mkdir -p dist/bin dist/lib dist/include

          cp target/release/opencc-rs${{ matrix.bin_ext }} dist/bin/
          cp target/release/opencc-clip${{ matrix.bin_ext }} dist/bin/
          cp target/release/dict-generate${{ matrix.bin_ext }} dist/bin/

          cp capi/opencc_fmmseg_capi.h dist/include/
          cp capi/OpenccFmmsegHelper.hpp dist/include/

          cp target/release/${{ matrix.dll_name }} dist/lib/
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/release/opencc_fmmseg_capi.dll.lib dist/lib/
          fi

          # Create version.txt and README.txt
          echo "Version: ${{ github.ref_name }}" > dist/version.txt

          cat << EOF > dist/README.txt
  Opencc-Fmmseg ${{ github.ref_name }}

Included folders:
  - bin/: Command-line tools (opencc-rs, opencc-clip, dict-generate)
  - lib/: C API shared library (platform-specific)
  - include/: C API header and C++ header-only helper

Usage:
  - Place the shared library in your LD_LIBRARY_PATH (Linux/macOS) or alongside .exe (Windows).
  - Include the headers in your C/C++ project for FFI integration.
  EOF

  - name: Zip Structured Artifacts
    run: 7z a ${{ matrix.artifact_name }}.zip ./dist/*

  - name: Upload Artifact
    uses: actions/upload-artifact@v4
    with:
      name: ${{ matrix.artifact_name }}
      path: ${{ matrix.artifact_name }}.zip

release:
  name: Release Artifacts
  needs: build
  runs-on: ubuntu-latest

  steps:
    - uses: actions/checkout@v4

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Publish GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/**/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
